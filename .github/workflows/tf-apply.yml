- name: Build Infrastructure with terraform
  on:
    pull_request:

  env:
    ARM_CLIENT_ID:
    ARM_CLIENT_SECRET:
    ARM_TENANT_ID:
    ARM_SUBSCRIPTION_ID:

  jobs:
    terraform:
      name: "Terraform Plan"
      run-on: ubuntu-latest
      environment:
        name: dev
      defaults:
        run:
          shell: /bin/bash
          working-directory: ./dev
      permissions:
        contents: read
        pull-requests: write
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        
        - name: Setup terraform
          uses:  hashicorp/setup-terraform@v2

        - name: Terraform format check
          run: terraform fmt -check
          continue-on-error: true

        - name: Terraform init
          id: init
          run: terraform init

        - name: Terraform validate
          id: validate
          run: terraform validate -no-color

        - name: Terraform plan
          id: plan
          run: terraform plan -no-color
          
        - uses: actions/github-script@v6
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
          cont output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization \`${{ steps.init.outcome }}\`
          #### Terraform Validation \`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
      })



